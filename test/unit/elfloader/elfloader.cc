#include <algorithm>
#include <ios>
#include <sstream>

#include "elfloader/elfloader.hh"
#include "test_header.hh"

using namespace sim;

TEST(elfloader, ctorFail) {
  // Assign
  std::istringstream ss{"Bad input stream"};

  // Act & Assert
  EXPECT_THROW(ELFLoader{ss}, std::runtime_error);
}

TEST(elfloader, segments) {
  // Assign
  /*
    .option nopic
    .attribute arch, "rv32i2p0"
    .attribute unaligned_access, 0
    .attribute stack_align, 16

    .section .rodata
    msg:
        .string "Hello World\n"

    .section .data
    num:
        .word 97

    .text
    .align  2
    .globl  _start
    .type  _start, @function

    ######################################################
    _start:

      add x30, x30, x30
      jal LABEL1  # jump to target and save position to ra

    LABEL2:
      ecall

    LABEL1:
      jal LABEL2

    ######################################################

    .size  _start, .-_start
  */

  std::istringstream ss(
      {'\x7f', '\x45', '\x4c', '\x46', '\x01', '\x01', '\x01', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00',
       '\xf3', '\x00', '\x01', '\x00', '\x00', '\x00', '\x94', '\x00', '\x01',
       '\x00', '\x34', '\x00', '\x00', '\x00', '\xb8', '\x02', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x34', '\x00', '\x20', '\x00', '\x03',
       '\x00', '\x28', '\x00', '\x08', '\x00', '\x07', '\x00', '\x03', '\x00',
       '\x00', '\x70', '\xb5', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x1c', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x01',
       '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x01',
       '\x00', '\xb1', '\x00', '\x00', '\x00', '\xb1', '\x00', '\x00', '\x00',
       '\x05', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x01',
       '\x00', '\x00', '\x00', '\xb1', '\x00', '\x00', '\x00', '\xb1', '\x10',
       '\x01', '\x00', '\xb1', '\x10', '\x01', '\x00', '\x04', '\x00', '\x00',
       '\x00', '\x04', '\x00', '\x00', '\x00', '\x06', '\x00', '\x00', '\x00',
       '\x00', '\x10', '\x00', '\x00', '\x33', '\x0f', '\xef', '\x01', '\xef',
       '\x00', '\x80', '\x00', '\x73', '\x00', '\x00', '\x00', '\xef', '\xf0',
       '\xdf', '\xff', '\x48', '\x65', '\x6c', '\x6c', '\x6f', '\x20', '\x57',
       '\x6f', '\x72', '\x6c', '\x64', '\x0a', '\x00', '\x61', '\x00', '\x00',
       '\x00', '\x41', '\x1b', '\x00', '\x00', '\x00', '\x72', '\x69', '\x73',
       '\x63', '\x76', '\x00', '\x01', '\x11', '\x00', '\x00', '\x00', '\x04',
       '\x10', '\x05', '\x72', '\x76', '\x33', '\x32', '\x69', '\x32', '\x70',
       '\x30', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x94', '\x00',
       '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x03', '\x00', '\x01',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\xa4', '\x00', '\x01', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x03', '\x00', '\x02', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\xb1', '\x10', '\x01', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x03', '\x00', '\x03', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
       '\x03', '\x00', '\x04', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x00',
       '\xf1', '\xff', '\x05', '\x00', '\x00', '\x00', '\xa4', '\x00', '\x01',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x02', '\x00',
       '\x09', '\x00', '\x00', '\x00', '\xb1', '\x10', '\x01', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x03', '\x00', '\x0d', '\x00',
       '\x00', '\x00', '\x94', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x01', '\x00', '\x10', '\x00', '\x00', '\x00',
       '\xa0', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x01', '\x00', '\x17', '\x00', '\x00', '\x00', '\x9c', '\x00',
       '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01',
       '\x00', '\x1e', '\x00', '\x00', '\x00', '\xb1', '\x18', '\x01', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\xf1', '\xff', '\x30',
       '\x00', '\x00', '\x00', '\xb5', '\x10', '\x01', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x10', '\x00', '\x03', '\x00', '\x51', '\x00', '\x00',
       '\x00', '\x94', '\x00', '\x01', '\x00', '\x10', '\x00', '\x00', '\x00',
       '\x12', '\x00', '\x01', '\x00', '\x40', '\x00', '\x00', '\x00', '\xb8',
       '\x10', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00',
       '\x03', '\x00', '\x4c', '\x00', '\x00', '\x00', '\xb5', '\x10', '\x01',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x10', '\x00', '\x03', '\x00',
       '\x58', '\x00', '\x00', '\x00', '\xb1', '\x10', '\x01', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x10', '\x00', '\x03', '\x00', '\x67', '\x00',
       '\x00', '\x00', '\xb5', '\x10', '\x01', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x10', '\x00', '\x03', '\x00', '\x6e', '\x00', '\x00', '\x00',
       '\xb8', '\x10', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x10',
       '\x00', '\x03', '\x00', '\x00', '\x61', '\x2e', '\x6f', '\x00', '\x6d',
       '\x73', '\x67', '\x00', '\x6e', '\x75', '\x6d', '\x00', '\x24', '\x78',
       '\x00', '\x4c', '\x41', '\x42', '\x45', '\x4c', '\x31', '\x00', '\x4c',
       '\x41', '\x42', '\x45', '\x4c', '\x32', '\x00', '\x5f', '\x5f', '\x67',
       '\x6c', '\x6f', '\x62', '\x61', '\x6c', '\x5f', '\x70', '\x6f', '\x69',
       '\x6e', '\x74', '\x65', '\x72', '\x24', '\x00', '\x5f', '\x5f', '\x53',
       '\x44', '\x41', '\x54', '\x41', '\x5f', '\x42', '\x45', '\x47', '\x49',
       '\x4e', '\x5f', '\x5f', '\x00', '\x5f', '\x5f', '\x42', '\x53', '\x53',
       '\x5f', '\x45', '\x4e', '\x44', '\x5f', '\x5f', '\x00', '\x5f', '\x5f',
       '\x62', '\x73', '\x73', '\x5f', '\x73', '\x74', '\x61', '\x72', '\x74',
       '\x00', '\x5f', '\x5f', '\x44', '\x41', '\x54', '\x41', '\x5f', '\x42',
       '\x45', '\x47', '\x49', '\x4e', '\x5f', '\x5f', '\x00', '\x5f', '\x65',
       '\x64', '\x61', '\x74', '\x61', '\x00', '\x5f', '\x65', '\x6e', '\x64',
       '\x00', '\x00', '\x2e', '\x73', '\x79', '\x6d', '\x74', '\x61', '\x62',
       '\x00', '\x2e', '\x73', '\x74', '\x72', '\x74', '\x61', '\x62', '\x00',
       '\x2e', '\x73', '\x68', '\x73', '\x74', '\x72', '\x74', '\x61', '\x62',
       '\x00', '\x2e', '\x74', '\x65', '\x78', '\x74', '\x00', '\x2e', '\x72',
       '\x6f', '\x64', '\x61', '\x74', '\x61', '\x00', '\x2e', '\x64', '\x61',
       '\x74', '\x61', '\x00', '\x2e', '\x72', '\x69', '\x73', '\x63', '\x76',
       '\x2e', '\x61', '\x74', '\x74', '\x72', '\x69', '\x62', '\x75', '\x74',
       '\x65', '\x73', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x1b', '\x00',
       '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x06', '\x00', '\x00',
       '\x00', '\x94', '\x00', '\x01', '\x00', '\x94', '\x00', '\x00', '\x00',
       '\x10', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x04', '\x00', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x21', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00',
       '\x00', '\x02', '\x00', '\x00', '\x00', '\xa4', '\x00', '\x01', '\x00',
       '\xa4', '\x00', '\x00', '\x00', '\x0d', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x29', '\x00', '\x00',
       '\x00', '\x01', '\x00', '\x00', '\x00', '\x03', '\x00', '\x00', '\x00',
       '\xb1', '\x10', '\x01', '\x00', '\xb1', '\x00', '\x00', '\x00', '\x04',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x2f', '\x00', '\x00', '\x00', '\x03', '\x00', '\x00', '\x70',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\xb5',
       '\x00', '\x00', '\x00', '\x1c', '\x00', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00',
       '\x02', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\xd4', '\x00', '\x00', '\x00', '\x30', '\x01',
       '\x00', '\x00', '\x06', '\x00', '\x00', '\x00', '\x0b', '\x00', '\x00',
       '\x00', '\x04', '\x00', '\x00', '\x00', '\x10', '\x00', '\x00', '\x00',
       '\x09', '\x00', '\x00', '\x00', '\x03', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x04', '\x02',
       '\x00', '\x00', '\x73', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x01', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x11', '\x00', '\x00', '\x00', '\x03',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
       '\x00', '\x00', '\x77', '\x02', '\x00', '\x00', '\x41', '\x00', '\x00',
       '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
       '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'});
  ELFLoader loader{ss};
  std::vector<Addr> addrsReal = {0x00010000, 0x000110b1},
                    addrs(addrsReal.size());

  // Act
  auto loadable = loader.getLoadableSegments();
  decltype(loadable) answ{1, 2};

  std::transform(loadable.begin(), loadable.end(), addrs.begin(),
                 [&loader](auto idx) { return loader.getSegmentAddr(idx); });

  // Assert
  EXPECT_EQ(loadable, answ);
  EXPECT_EQ(addrs, addrsReal);
  EXPECT_EQ(loader.getEntryPoint(), Addr(0x10094));
}

#include "test_footer.hh"
